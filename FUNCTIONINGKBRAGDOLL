local hitCount = 0
local resetHitCountTask

game.ReplicatedStorage.ComboEvent.OnServerEvent:Connect(function(plr)
	spawn(function()
		plr.Character.Humanoid.WalkSpeed = 7
		task.wait(0.3125)
		plr.Character.Humanoid.WalkSpeed = 16
	end)

	local hitbox = Instance.new("Part")
	hitbox.Parent = workspace
	hitbox.CanCollide = false
	hitbox.Anchored = true
	hitbox.Size = Vector3.new(4, 4, 4)
	hitbox.BrickColor = BrickColor.new("Red")
	hitbox.Transparency = 0.5
	hitbox.CFrame = plr.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -3)
	game.Debris:AddItem(hitbox, 0.3125)

	local hitboxcooldown = false
	hitbox.Touched:Connect(function(hit)
		if hit.Parent.Name ~= plr.Name and hit.Parent:FindFirstChild("Humanoid") then
			if hitboxcooldown then return end
			hitboxcooldown = true

			hit.Parent:FindFirstChild("Humanoid"):TakeDamage(5)
			local sound = script.HitSFX.hit_punch_l:Clone()
			sound.Parent = hit.Parent.HumanoidRootPart
			sound:Play()
			game.Debris:AddItem(sound, 1)

			hitCount = hitCount + 1
			if resetHitCountTask then
				task.cancel(resetHitCountTask)
			end
			resetHitCountTask = task.delay(1.5, function()
				hitCount = 0
			end)

			if hitCount == 5 then
				hitCount = 0
				local humanoid = hit.Parent:FindFirstChild("Humanoid")
				if humanoid then
					local jointPropertiesList = {}
					local socketList = {}

					-- Cleanup existing ragdoll state
					for _, obj in ipairs(hit.Parent:GetDescendants()) do
						if obj:IsA("BallSocketConstraint") or obj:IsA("Attachment") then
							obj:Destroy()
						end
					end

					-- Disable collisions for all parts of the rig
					for _, part in ipairs(hit.Parent:GetChildren()) do
						if part:IsA("BasePart") then
							part.CanCollide = false
						end
					end

					-- Save and destroy Motor6D joints
					for _, joint in pairs(hit.Parent:GetDescendants()) do
						if joint:IsA("Motor6D") then
							local socket = Instance.new("BallSocketConstraint")
							local a1 = Instance.new("Attachment")
							local a2 = Instance.new("Attachment")
							a1.Parent = joint.Part0
							a2.Parent = joint.Part1
							socket.Parent = joint.Parent
							socket.Attachment0 = a1
							socket.Attachment1 = a2
							a1.CFrame = joint.C0
							a2.CFrame = joint.C1
							socket.LimitsEnabled = true
							socket.TwistLimitsEnabled = true

							table.insert(jointPropertiesList, {
								C0 = joint.C0,
								C1 = joint.C1,
								Part0 = joint.Part0,
								Part1 = joint.Part1,
								Parent = joint.Parent
							})

							table.insert(socketList, socket)
							joint:Destroy()
						end
					end

					-- Apply knockback using ApplyImpulse
					local humanoidRootPart = hit.Parent:FindFirstChild("HumanoidRootPart")
					if humanoidRootPart then
						local direction = (humanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).Unit
						local knockbackForce = direction * 500 + Vector3.new(0, 500, 0)
						humanoidRootPart:ApplyImpulse(knockbackForce)
					end

					-- Wait for the knockback to finish
					task.wait(2)

					-- Restore Motor6D joints
					for _, jointProperties in pairs(jointPropertiesList) do
						local newJoint = Instance.new("Motor6D")
						newJoint.C0 = jointProperties.C0
						newJoint.C1 = jointProperties.C1
						newJoint.Part0 = jointProperties.Part0
						newJoint.Part1 = jointProperties.Part1
						newJoint.Parent = jointProperties.Parent
					end

					-- Remove BallSocketConstraints
					for _, socket in pairs(socketList) do
						socket:Destroy()
					end

					-- Re-enable collisions
					for _, part in ipairs(hit.Parent:GetChildren()) do
						if part:IsA("BasePart") then
							part.CanCollide = true
						end
					end

					-- Ensure humanoid is reset to a valid state
					humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
				end
			end

			task.wait(1)
			hitboxcooldown = false
		end
	end)
end)

